import com.android.Version

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["SmileId_kotlinVersion"]

  repositories {
    maven {
      url  = 'https://central.sonatype.com/repository/maven-snapshots/'
    }
    google()
    mavenCentral()
    gradlePluginPortal()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.3.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    if (kotlin_version?.startsWith("2")) {
      classpath "org.jetbrains.kotlin:compose-compiler-gradle-plugin:$kotlin_version"
    }
    classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    classpath "org.jlleitschuh.gradle:ktlint-gradle:12.1.1"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def kotlinVersion = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["SmileId_kotlinVersion"]

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
//apply plugin: 'kotlin-kapt'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "org.jetbrains.kotlin.plugin.serialization"
if (kotlinVersion?.startsWith("2")) {
  apply plugin: "org.jetbrains.kotlin.plugin.compose"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["SmileId_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["SmileId_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  if (major == 7 && minor >= 3) {
    return true
  }

  return major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.smileidentity.react"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  buildFeatures {
    buildConfig true
    compose = true
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17.toString()
    freeCompilerArgs += ['-Xskip-metadata-version-check']
  }

  lintOptions {
    disable "GradleCompatible"
  }

  composeOptions {
    kotlinCompilerExtensionVersion rootProject.ext.has("kotlinCompilerExtensionVersion") ? rootProject.ext.get("kotlinCompilerExtensionVersion") : project.properties["SmileId_kotlinCompilerExtensionVersion"]
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  sourceSets {
    main {
      java.srcDirs += ["src/oldarch"]
    }
  }
}

repositories {
  maven {
    url  = 'https://central.sonatype.com/repository/maven-snapshots/'
  }
  mavenCentral()
  google()
  gradlePluginPortal()
}

def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["SmileId_kotlinVersion"]
def smile_id_sdk_version = rootProject.ext.has("smileIdAndroidSdkVersion") ? rootProject.ext.get("smileIdAndroidSdkVersion") : project.properties["SmileId_androidVersion"]
configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
dependencies {
  implementation "com.facebook.react:react-native:0.72"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core"
  implementation "com.smileidentity:android-sdk:$smile_id_sdk_version"
//  implementation(group: "com.smileidentity", name: "android-sdk", version: "10.6.1-20250512.190207-63") {
//    changing = true
//  }
  implementation "com.google.mlkit:object-detection:17.0.2"
  implementation "com.jakewharton.timber:timber"
  implementation 'androidx.appcompat:appcompat:1.7.0'
  implementation("androidx.navigation:navigation-compose:2.8.4")
  implementation("androidx.lifecycle:lifecycle-runtime-compose:2.8.7")
  implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.3")
  implementation("androidx.compose.runtime:runtime:1.7.5")

  testImplementation 'junit:junit:4.13.2'

  androidTestImplementation 'androidx.test.ext:junit:1.2.1'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
  androidTestImplementation platform('androidx.compose:compose-bom:2024.11.00')
  androidTestImplementation 'androidx.compose.ui:ui-test-junit4'

  debugImplementation 'androidx.compose.ui:ui-tooling'
  debugImplementation 'androidx.compose.ui:ui-test-manifest'
}
